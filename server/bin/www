#!/usr/bin/env node

require('dotenv').config()
const _ = require('underscore');

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('mearn:server');
var http = require('http');
const { createTerminus } = require('@godaddy/terminus');
const { exit } = require('process');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/*
 * shutdown
 */
//-------------------------
// Shutdown
//-------------------------

function onSignal(){
  console.log('Release db connections, etc');
  return Promise.all([]);
}

function onShutdown () {
  console.log('cleanup finished, server is shutting down');
}

createTerminus(server, {
  timeout: 2000,//ms
  signals:['SIGINT', 'SIGTERM'],
  onSignal,
  onShutdown
});


// Nodemon
process.once('SIGUSR2', function(){
  onSignal().then(()=>{
    onShutdown();
    return;
  })
    .then(() => {
      console.log('kill');
      process.kill(process.pid, 'SIGUSR2');
    });
});


/**
 * Listen on provided port, on all network interfaces.
 */


Promise.all([])
  .then(() => {
    server.listen(port);
  })



server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
  case 'EACCES':
    console.error(bind + ' requires elevated privileges');
    process.exit(1);
    break;
  case 'EADDRINUSE':
    console.error(bind + ' is already in use');
    process.exit(1);
    break;
  default:
    throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log('Listening on ' + bind);
  console.log('Swagger:', '/api-docs');

}
